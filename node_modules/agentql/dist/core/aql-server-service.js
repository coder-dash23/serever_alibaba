"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.aqlQueryElements = aqlQueryElements;
exports.aqlQueryData = aqlQueryData;
const axios_1 = require("axios");
const util_1 = require("util");
const zlib_1 = require("zlib");
const api_constants_1 = require("./api-constants");
const config_1 = require("./config");
const errors_1 = require("./errors");
const logger_1 = require("./logger");
const MESSAGE_API_KEY_NOT_SET = `
AgentQL API key is not set.
Please set the AgentQL API key by invoking \`agentql init\` command or by setting the environment variable 'AGENTQL_API_KEY'.
If you don't yet have an AgentQL API key, you can sign up for a free account at https://dev.agentql.com
You could refer to the documentation for more information: https://docs.agentql.com/installation/sdk-installation.
`
    .trim()
    .replace(/\n/g, ' ');
const MESSAGE_API_KEY_INVALID = `
Invalid or expired API key provided.
Please set a valid AgentQL API key by invoking \`agentql init\` command or by setting the environment variable 'AGENTQL_API_KEY'.
You could refer to the documentation for more information: https://docs.agentql.com/installation/sdk-installation.
`
    .trim()
    .replace(/\n/g, ' ');
function _getHost() {
    return process.env.AGENTQL_API_HOST || api_constants_1.SERVICE_URL;
}
function _getQueryElementUrl() {
    return _getHost() + api_constants_1.GET_AGENTQL_ELEMENT_ENDPOINT;
}
function _getQueryDataUrl() {
    return _getHost() + api_constants_1.GET_AGENTQL_DATA_ENDPOINT;
}
function _getApiKey() {
    if (config_1.config.apiKey) {
        logger_1.logger.debug(`Using API key from config...`);
        return config_1.config.apiKey;
    }
    const apiKey = process.env.AGENTQL_API_KEY;
    logger_1.logger.debug(`Using API key from environment variable...`);
    if (!apiKey) {
        throw new errors_1.APIKeyError(MESSAGE_API_KEY_NOT_SET);
    }
    return apiKey;
}
function _queryWorker(url_1, query_1, atree_1, pageUrl_1) {
    return __awaiter(this, arguments, void 0, function* (url, query, atree, pageUrl, mode = api_constants_1.DEFAULT_RESPONSE_MODE, timeout) {
        var _a, _b, _c;
        logger_1.logger.debug(`Sending request to ${url} with query: ${(0, logger_1.minifyQuery)(query)}`);
        const headers = {
            'Content-Type': 'application/json',
            'X-API-Key': _getApiKey(),
            'Content-Encoding': 'gzip',
        };
        const body = JSON.stringify({
            query: query,
            accessibility_tree: atree,
            metadata: { url: pageUrl },
            params: { mode: mode },
            request_originator: 'sdk-playwright-js',
        });
        const gzipAsync = (0, util_1.promisify)(zlib_1.gzip);
        const compressedBody = yield gzipAsync(body);
        try {
            const response = yield axios_1.default.post(url, compressedBody, {
                headers: headers,
                timeout: timeout,
            });
            const result = response.data.response;
            const requestId = response.data.request_id;
            logger_1.logger.debug(`Request ID for the query ${(0, logger_1.minifyQuery)(query)}: ${requestId}`);
            logger_1.logger.debug(`AgentQL server response for ${(0, logger_1.minifyQuery)(query)}: ${JSON.stringify(result, null, 2)}`);
            return result;
        }
        catch (error) {
            logger_1.logger.error(`AgentQL server error of ${url}`, error);
            if (!axios_1.default.isAxiosError(error)) {
                throw new errors_1.BaseAgentQLError('Unknown error.');
            }
            // Handling timeout error
            if (error.code === 'ECONNABORTED') {
                throw new errors_1.AgentQLServerTimeoutError();
            }
            const requestId = (_a = error.response) === null || _a === void 0 ? void 0 : _a.headers['X-Request-ID'];
            // Handling API key error
            if (((_b = error.response) === null || _b === void 0 ? void 0 : _b.status) === 403) {
                throw new errors_1.APIKeyError(MESSAGE_API_KEY_INVALID, requestId);
            }
            // Handling other server errors
            throw new errors_1.AgentQLServerError(error.message, (_c = error.response) === null || _c === void 0 ? void 0 : _c.status, requestId);
        }
    });
}
function aqlQueryElements(query, atree, pageUrl, mode, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _queryWorker(_getQueryElementUrl(), query, atree, pageUrl, mode, timeout);
    });
}
function aqlQueryData(query, atree, pageUrl, mode, timeout) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield _queryWorker(_getQueryDataUrl(), query, atree, pageUrl, mode, timeout);
    });
}
